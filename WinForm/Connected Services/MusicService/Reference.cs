//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinForm.MusicService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
    [System.SerializableAttribute()]
    public partial class ServiceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Genres", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
    public enum Genres : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        POP = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ROCK = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        METAL = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EDM = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RAP = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRAP = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLASSIC = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGGAE = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Music", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
    [System.SerializableAttribute()]
    public partial class Music : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DislikesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WinForm.MusicService.Genres GenreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LikesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dislikes {
            get {
                return this.DislikesField;
            }
            set {
                if ((this.DislikesField.Equals(value) != true)) {
                    this.DislikesField = value;
                    this.RaisePropertyChanged("Dislikes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WinForm.MusicService.Genres Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((this.GenreField.Equals(value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Likes {
            get {
                return this.LikesField;
            }
            set {
                if ((this.LikesField.Equals(value) != true)) {
                    this.LikesField = value;
                    this.RaisePropertyChanged("Likes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MusicService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/LoginServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMusic", ReplyAction="http://tempuri.org/IService1/AddMusicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/AddMusicServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        string AddMusic(string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMusic", ReplyAction="http://tempuri.org/IService1/AddMusicResponse")]
        System.Threading.Tasks.Task<string> AddMusicAsync(string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListMusic", ReplyAction="http://tempuri.org/IService1/ListMusicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/ListMusicServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        WinForm.MusicService.Music[] ListMusic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListMusic", ReplyAction="http://tempuri.org/IService1/ListMusicResponse")]
        System.Threading.Tasks.Task<WinForm.MusicService.Music[]> ListMusicAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMusic", ReplyAction="http://tempuri.org/IService1/UpdateMusicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/UpdateMusicServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        string UpdateMusic(int id, string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateMusic", ReplyAction="http://tempuri.org/IService1/UpdateMusicResponse")]
        System.Threading.Tasks.Task<string> UpdateMusicAsync(int id, string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMusic", ReplyAction="http://tempuri.org/IService1/DeleteMusicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/DeleteMusicServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        string DeleteMusic(int id, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMusic", ReplyAction="http://tempuri.org/IService1/DeleteMusicResponse")]
        System.Threading.Tasks.Task<string> DeleteMusicAsync(int id, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllMusic", ReplyAction="http://tempuri.org/IService1/DeleteAllMusicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/DeleteAllMusicServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        string DeleteAllMusic(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllMusic", ReplyAction="http://tempuri.org/IService1/DeleteAllMusicResponse")]
        System.Threading.Tasks.Task<string> DeleteAllMusicAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WinForm.MusicService.ServiceData), Action="http://tempuri.org/IService1/LogoutServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/WCF")]
        void Logout(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string uid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WinForm.MusicService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WinForm.MusicService.IService1>, WinForm.MusicService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string AddMusic(string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid) {
            return base.Channel.AddMusic(name, artist, album, genre, likes, dislikes, guid);
        }
        
        public System.Threading.Tasks.Task<string> AddMusicAsync(string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid) {
            return base.Channel.AddMusicAsync(name, artist, album, genre, likes, dislikes, guid);
        }
        
        public WinForm.MusicService.Music[] ListMusic() {
            return base.Channel.ListMusic();
        }
        
        public System.Threading.Tasks.Task<WinForm.MusicService.Music[]> ListMusicAsync() {
            return base.Channel.ListMusicAsync();
        }
        
        public string UpdateMusic(int id, string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid) {
            return base.Channel.UpdateMusic(id, name, artist, album, genre, likes, dislikes, guid);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMusicAsync(int id, string name, string artist, string album, WinForm.MusicService.Genres genre, int likes, int dislikes, string guid) {
            return base.Channel.UpdateMusicAsync(id, name, artist, album, genre, likes, dislikes, guid);
        }
        
        public string DeleteMusic(int id, string guid) {
            return base.Channel.DeleteMusic(id, guid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteMusicAsync(int id, string guid) {
            return base.Channel.DeleteMusicAsync(id, guid);
        }
        
        public string DeleteAllMusic(string guid) {
            return base.Channel.DeleteAllMusic(guid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllMusicAsync(string guid) {
            return base.Channel.DeleteAllMusicAsync(guid);
        }
        
        public void Logout(string uid) {
            base.Channel.Logout(uid);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string uid) {
            return base.Channel.LogoutAsync(uid);
        }
    }
}
